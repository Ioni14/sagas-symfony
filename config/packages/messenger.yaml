framework:
    messenger:
        default_bus: event.bus
        buses:
            event.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - saga_transaction
#                    - doctrine_transaction
                    - saga_persistence
#                    - 'app.messenger.handle_saga'
            command.bus:
                middleware:
                    - saga_transaction
#                    - doctrine_transaction
                    - saga_persistence
#                    - 'app.messenger.handle_saga'

        failure_transport: failed_default
        transports:
            failed_default: '%env(FAILED_TRANSPORT_DSN)%'
            sales_failed: '%env(SALES_FAILED_TRANSPORT_DSN)%'
            billing_failed: '%env(BILLING_FAILED_TRANSPORT_DSN)%'
            shipping_failed: '%env(SHIPPING_FAILED_TRANSPORT_DSN)%'
#            outbox:
#                dsn: '%env(OUTBOX_TRANSPORT_DSN)%'
            billing_events:
                dsn: '%env(BILLING_EVENTS_TRANSPORT_DSN)%'
                failure_transport: billing_failed
                retry_strategy: # delayed retry (for semi-transient errors)
                    max_retries: 0 # TODO : only for testing
                    delay: 10000
            sales_events:
                dsn: '%env(SALES_EVENTS_TRANSPORT_DSN)%'
                failure_transport: sales_failed
                retry_strategy:
                    max_retries: 0 # TODO : only for testing
                    delay: 10000
            sales_commands:
                dsn: '%env(SALES_COMMANDS_TRANSPORT_DSN)%'
                failure_transport: sales_failed
                retry_strategy:
                    max_retries: 0 # TODO : only for testing
                    delay: 10000
            shipping_events:
                dsn: '%env(SHIPPING_EVENTS_TRANSPORT_DSN)%'
                failure_transport: shipping_failed
                retry_strategy:
                    max_retries: 0 # TODO : only for testing
                    delay: 10000
            shipping_commands:
                dsn: '%env(SHIPPING_COMMANDS_TRANSPORT_DSN)%'
                failure_transport: shipping_failed
                retry_strategy:
                    max_retries: 0 # TODO : only for testing
                    delay: 10000
        routing:
            Billing\Domain\Event\OrderBilled: billing_events
            Sales\Domain\Event\OrderPlaced: sales_events
            Sales\Domain\Command\PlaceOrder: sales_commands
            Sales\Domain\Command\CancelOrder: sales_commands
            Sales\Application\BuyersRemorseIsOver: sales_events
            Shipping\Domain\Command\ShipOrder: shipping_commands
            Shipping\Application\Command\ShipWithMaple: shipping_commands
            Shipping\Application\Command\ShipWithAlpine: shipping_commands
            Shipping\Application\Timeout\ShippingEscalation: shipping_events
            Shipping\Application\Event\ShipmentAcceptedByMaple: shipping_events
            Shipping\Application\Event\ShipmentAcceptedByAlpine: shipping_events
            Shipping\Application\Event\ShipmentFailed: shipping_events

        serializer:
            default_serializer: messenger.transport.symfony_serializer
            symfony_serializer:
                format: json
                context: { }

when@test_acceptance:
    framework:
        messenger:
            default_bus: command.bus
            buses:
                command.bus:
                    middleware:
                        - saga_transaction
                        - saga_persistence
            transports:
                memory:
                    dsn: 'in-memory://'
                    retry_strategy:
                        max_retries: 0
            routing:
                Tests\Acceptance\Saga\Message\OneHandlerFirstMessage: memory
                Tests\Acceptance\Saga\Message\TwoHandlerFirstMessage: memory
                Tests\Acceptance\Saga\Message\TwoHandlerSecondMessage: memory
            serializer:
                default_serializer: messenger.transport.symfony_serializer
                symfony_serializer:
                    format: json
                    context: { }
